'use strict';

const excelToJson = require('../');
const assert = require('assert');
const fs = require('fs');

// This Excel contains dummy data and it was generated by https://www.mockaroo.com
const sourceFile = `${__dirname}/test-data.xlsx`.replace(/\\/g, '/');
const sourceBuffer = fs.readFileSync(sourceFile);

describe('Conversion', function() {
  it('should throw an error if no \'sourceFile\' or \'source\' is defined in config', function() {
    assert.throws(() => excelToJson({}), Error);
  });

	describe('Simple :: having an Object Literal as a param', function() {
		simple({
			sourceFile: sourceFile
		});
	});

	describe('Simple :: having a JSON String as a param', function() {
		simple(`{
			"sourceFile": "${sourceFile}"
		}`);
	});

	describe('Simple :: having a Buffer as a source', function() {
		simple({
			"source": sourceBuffer
		});
	});

	describe('"sheets" config', function() {

		describe('get "sheet1" and "sheet2" configuring "sheets" with an array of string and object', function() {
			const jsonResult = excelToJson({
				sourceFile: sourceFile,
				sheets: ['sheet1', {
					name: 'sheet2'
				}]
			});

			it('should be an Object', function() {
				assert.equal(jsonResult.constructor, Object);
			});

			it('should have two result sets (Object with two keys)', function() {
				assert.equal(Object.keys(jsonResult).length, 2);
			});

			describe('sheet1', function() {

				it('should have a key named "sheet1"', function() {
					assert.notEqual(jsonResult.sheet1, undefined);
				});

				describe('result data', function() {

					it('should have 25 "rows"', function() {
						assert.equal(jsonResult.sheet1.length, 25);
					});

					it('should have the following keys "A", "B", "C", "D", "E", "F"', function() {
						assert.deepEqual(['A', 'B', 'C', 'D', 'E', 'F'], Object.keys(jsonResult.sheet1[0]));
					});

					it('should have the header values (first row) on the first "row"', function() {
						assert.deepEqual({
							A: 'id',
							B: 'first_name',
							C: 'last_name',
							D: 'email',
							E: 'gender',
							F: 'ip_address'
						}, jsonResult.sheet1[0]);
					});

					it('should have the header values on the first position', function() {
						assert.deepEqual({
							A: 'id',
							B: 'first_name',
							C: 'last_name',
							D: 'email',
							E: 'gender',
							F: 'ip_address'
						}, jsonResult.sheet1[0]);
					});

					it('should have the last row data on the last position', function() {
						assert.deepEqual({
							A: '24',
							B: 'Debra',
							C: 'Oliver',
							D: 'dolivern@yolasite.com',
							E: 'Female',
							F: '187.87.117.203'
						}, jsonResult.sheet1[jsonResult.sheet1.length - 1]);
					});
				});
			});

			describe('sheet2', function() {

				it('should have a key named "sheet2"', function() {
					assert.notEqual(jsonResult.sheet2, undefined);
				});

				describe('result data', function() {
					it('should have 27 "rows"', function() {
						assert.equal(jsonResult.sheet2.length, 27);
					});

					it('should have the following keys "A", "B", "C", "D", "E", "F"', function() {
						assert.deepEqual(['A', 'B', 'C', 'D', 'E', 'F'], Object.keys(jsonResult.sheet2[0]));
					});

					it('should have the header values (forst row) on the first position', function() {
						assert.deepEqual({
							A: 'id',
							B: 'first_name',
							C: 'last_name',
							D: 'email',
							E: 'gender',
							F: 'ip_address'
						}, jsonResult.sheet2[0]);
					});

					it('should have the last row data on the last position', function() {
						assert.deepEqual({
							A: '50',
							B: 'Susan',
							C: 'Miller',
							D: 'smiller1d@china.com.cn',
							E: 'Female',
							F: '244.232.244.90'
						}, jsonResult.sheet2[jsonResult.sheet2.length - 1]);
					});
				});
			});
		});

		describe('get only "sheet2" configuring with an array of strings', function() {

			const jsonResult = excelToJson({
				sourceFile: sourceFile,
				sheets: ['sheet2']
			});

			it('should be an Object', function() {
				assert.equal(jsonResult.constructor, Object);
			});

			it('should have one result set (Object with one key)', function() {
				assert.equal(Object.keys(jsonResult).length, 1);
			});

			describe('sheet1', function() {
				it('should not have a key named "sheet1"', function() {
					assert.equal(jsonResult.sheet1, undefined);
				});
			});

			describe('sheet2', function() {

				it('should have a key named "sheet2"', function() {
					assert.notEqual(jsonResult.sheet2, undefined);
				});

				describe('result data', function() {

					it('should have 27 "rows"', function() {
						assert.equal(jsonResult.sheet2.length, 27);
					});

					it('should have the following keys "A", "B", "C", "D", "E", "F"', function() {
						assert.deepEqual(['A', 'B', 'C', 'D', 'E', 'F'], Object.keys(jsonResult.sheet2[0]));
					});

					it('should have the header values on the first "row"', function() {
						assert.deepEqual({
							A: 'id',
							B: 'first_name',
							C: 'last_name',
							D: 'email',
							E: 'gender',
							F: 'ip_address'
						}, jsonResult.sheet2[0]);
					});

					it('should have the header values on the first position', function() {
						assert.deepEqual({
							A: 'id',
							B: 'first_name',
							C: 'last_name',
							D: 'email',
							E: 'gender',
							F: 'ip_address'
						}, jsonResult.sheet2[0]);
					});

					it('should have the last row data on the last position', function() {
						assert.deepEqual({
							A: 50,
							B: 'Susan',
							C: 'Miller',
							D: 'smiller1d@china.com.cn',
							E: 'Female',
							F: '244.232.244.90'
						}, jsonResult.sheet2[jsonResult.sheet2.length - 1]);
					});
				});
			});
		});

		describe('get only "sheet2" configuring with "header.rows"', function() {
			const jsonResult = excelToJson({
				sourceFile: sourceFile,
				sheets: [{
					name: 'sheet2',
					header: {
						rows: 1
					}
				}]
			});

			it('should not have the header values on the first position', function() {
				assert.notDeepEqual({
					A: 'id',
					B: 'first_name',
					C: 'last_name',
					D: 'email',
					E: 'gender',
					F: 'ip_address'
				}, jsonResult.sheet2[0]);
			});
		});

		describe('get only "sheet2" configuring with "columToKey" and "header.rows" within "sheets"', function() {

			const jsonResult = excelToJson({
				sourceFile: sourceFile,
				sheets: [{
					name: 'sheet2',
					header: {
						rows: 1
					},
					columnToKey: {
						A: 'id',
						B: 'firstName',
						D: 'email'
					}
				}]
			});

			it('should be an Object', function() {
				assert.equal(jsonResult.constructor, Object);
			});

			it('should have one result set (Object with one key)', function() {
				assert.equal(Object.keys(jsonResult).length, 1);
			});

			describe('sheet1', function() {
				it('should not have a key named "sheet1"', function() {
					assert.equal(jsonResult.sheet1, undefined);
				});
			});

			describe('sheet2', function() {

				it('should have a key named "sheet2"', function() {
					assert.notEqual(jsonResult.sheet2, undefined);
				});

				describe('result data', function() {

					it('should have 26 "rows"', function() {
						assert.equal(jsonResult.sheet2.length, 26);
					});

					it('should have the following keys "id", "firstName", "email"', function() {
						assert.deepEqual(['id', 'firstName', 'email'], Object.keys(jsonResult.sheet2[0]));
					});

					it('should have the keys found on the header (first row)', function() {
						assert.notDeepEqual({
							id: 'id',
							firstName: 'first_name',
							email: 'email'
						}, jsonResult.sheet2[0]);
					});

					it('should have the first row on the first position', function() {
						assert.deepEqual({
							id: '25',
							firstName: 'Jack',
							email: 'jbishopo@businessinsider.com'
						}, jsonResult.sheet2[0]);
					});

					it('should have the last row data on the last position', function() {
						assert.deepEqual({
							id: '50',
							firstName: 'Susan',
							email: 'smiller1d@china.com.cn'
						}, jsonResult.sheet2[jsonResult.sheet2.length - 1]);
					});
				});
			});
		});

		describe('get only "sheet2" configuring with "columToKey" using cell variables (e.g. {{A1}})', function() {

			const jsonResult = excelToJson({
				sourceFile: sourceFile,
				sheets: [{
					name: 'sheet2',
				}],
				header: {
					rows: 1
				},
				columnToKey: {
					A: '{{A1}}',
					B: '{{B1}}',
					D: '{{D1}}'
				}
			});

			it('should be an Object', function() {
				assert.equal(jsonResult.constructor, Object);
			});

			it('should have one result set (Object with one key)', function() {
				assert.equal(Object.keys(jsonResult).length, 1);
			});

			describe('sheet1', function() {
				it('should not have a key named "sheet1"', function() {
					assert.equal(jsonResult.sheet1, undefined);
				});
			});

			describe('sheet2', function() {

				it('should have a key named "sheet2"', function() {
					assert.notEqual(jsonResult.sheet2, undefined);
				});

				describe('result data', function() {

					it('should have 26 "rows"', function() {
						assert.equal(jsonResult.sheet2.length, 26);
					});

					it('should have the keys found on the header (first row)', function() {
						assert.deepEqual(['id', 'first_name', 'email'], Object.keys(jsonResult.sheet2[0]));
					});

					it('should not have the header values on the first position', function() {
						assert.notDeepEqual({
							id: 'id',
							first_name: 'first_name',
							email: 'email'
						}, jsonResult.sheet2[0]);
					});

					it('should have the first row on the first position', function() {
						assert.deepEqual({
							id: '25',
							first_name: 'Jack',
							email: 'jbishopo@businessinsider.com'
						}, jsonResult.sheet2[0]);
					});

					it('should have the last row data on the last position', function() {
						assert.deepEqual({
							id: '50',
							first_name: 'Susan',
							email: 'smiller1d@china.com.cn'
						}, jsonResult.sheet2[jsonResult.sheet2.length - 1]);
					});
				});
			});
		});

		describe('get only "sheet2" configuring with "columToKey" and "header.rows" out of "sheets", within root config object', function() {

			const jsonResult = excelToJson({
				sourceFile: sourceFile,
				sheets: [{
					name: 'sheet2',
				}],
				header: {
					rows: 1
				},
				columnToKey: {
					A: 'id',
					B: 'firstName',
					D: 'email'
				}
			});

			it('should be an Object', function() {
				assert.equal(jsonResult.constructor, Object);
			});

			it('should have one result set (Object with one key)', function() {
				assert.equal(Object.keys(jsonResult).length, 1);
			});

			describe('sheet1', function() {
				it('should not have a key named "sheet1"', function() {
					assert.equal(jsonResult.sheet1, undefined);
				});
			});

			describe('sheet2', function() {

				it('should have a key named "sheet2"', function() {
					assert.notEqual(jsonResult.sheet2, undefined);
				});

				describe('result data', function() {

					it('should have 26 "rows"', function() {
						assert.equal(jsonResult.sheet2.length, 26);
					});

					it('should have the keys found on the header (first row)', function() {
						assert.deepEqual(['id', 'firstName', 'email'], Object.keys(jsonResult.sheet2[0]));
					});

					it('should not have the header values (first row) on the first position', function() {
						assert.notDeepEqual({
							id: 'id',
							firstName: 'first_name',
							email: 'email'
						}, jsonResult.sheet2[0]);
					});

					it('should have the first row on the first position', function() {
						assert.deepEqual({
							id: '25',
							firstName: 'Jack',
							email: 'jbishopo@businessinsider.com'
						}, jsonResult.sheet2[0]);
					});

					it('should have the last row data on the last position', function() {
						assert.deepEqual({
							id: '50',
							firstName: 'Susan',
							email: 'smiller1d@china.com.cn'
						}, jsonResult.sheet2[jsonResult.sheet2.length - 1]);
					});
				});
			});
		});

		describe('get only "sheet2" configuring with "columToKey" using the special key "*" (all columns) and the special cell variable {{columnHeader}} (the value present on the current columnHeader)', function() {

			const jsonResult = excelToJson({
				sourceFile: sourceFile,
				sheets: [{
					name: 'sheet2',
				}],
				header: {
					rows: 1
				},
				columnToKey: {
					'*': '{{columnHeader}}'
				}
			});

			it('should be an Object', function() {
				assert.equal(jsonResult.constructor, Object);
			});

			it('should have one result set (Object with one key)', function() {
				assert.equal(Object.keys(jsonResult).length, 1);
			});

			describe('sheet1', function() {
				it('should not have a key named "sheet1"', function() {
					assert.equal(jsonResult.sheet1, undefined);
				});
			});

			describe('sheet2', function() {

				it('should have a key named "sheet2"', function() {
					assert.notEqual(jsonResult.sheet2, undefined);
				});

				describe('result data', function() {

					it('should have 26 "rows"', function() {
						assert.equal(jsonResult.sheet2.length, 26);
					});

					it('should have the keys found on the header (first row)', function() {
						assert.deepEqual(['id', 'first_name', 'last_name', 'email', 'gender', 'ip_address'], Object.keys(jsonResult.sheet2[0]));
					});
				});
			});
		});

		describe('get only "sheet3" configuring with "includeEmptyLines"', function() {

			const jsonResult = excelToJson({
				sourceFile: sourceFile,
				sheets: [{
					name: 'sheet3',
				}],
				header: {
					rows: 0
				},
				includeEmptyLines: true
			});

			// console.log(jsonResult.sheet3);

			it('should be an Object', function() {
				assert.equal(jsonResult.constructor, Object);
			});

			describe('sheet1', function() {
				it('should not have a key named "sheet1"', function() {
					assert.equal(jsonResult.sheet1, undefined);
				});
			});

			describe('sheet3', function() {

				it('should have a key named "sheet3"', function() {
					assert.notEqual(jsonResult.sheet3, undefined);
				});

				describe('result data', function() {

					it('should have 23 "rows"', function() {
						assert.equal(jsonResult.sheet3.length, 23);
					});

					it('should not have any data in first row', function() {
						assert.equal(undefined, jsonResult.sheet3[0]);
					});

					it('should have the header values on the second position', function() {
						assert.deepStrictEqual({
							A: 'id',
							B: 'first_name',
							C: 'last_name',
							D: 'email',
							E: 'gender',
							F: 'ip_address'
						}, jsonResult.sheet3[1]);
					});

					it('should not have any data in fourth row', function() {
						assert.equal(undefined, jsonResult.sheet3[3]);
					});

					it('should not consider a row as empty if one or more cell has spaces', function() {
						assert.deepStrictEqual({
							A: '  ',
							B: '     ',
							C: '     ',
							D: '     ',
							E: '     ',
						}, jsonResult.sheet3[16]);
					});
				});
			});
		});

		describe('get only "sheet3" configuring with "sheetStubs"', function() {

			const jsonResult = excelToJson({
				sourceFile: sourceFile,
				sheets: [{
					name: 'sheet3',
				}],
				header: {
					rows: 0
				},
				includeEmptyLines: false,
				sheetStubs: true
			});

			it('should be an Object', function() {
				assert.equal(jsonResult.constructor, Object);
			});


			describe('sheet3', function() {

				it('should have a key named "sheet3"', function() {
					assert.notEqual(jsonResult.sheet3, undefined);
				});

				describe('result data', function() {

					it('should have null surname on one before last position', function() {
						assert.deepStrictEqual({
							A: 42,
							B: 'Kenneth',
							C: null,
							D: 'kduncan15@people.com.cn',
							E: 'Male',
							F: '105.112.16.103'
						}, jsonResult.sheet3[jsonResult.sheet3.length - 2]);
					});

				});
			});
		});
	});
});

function simple(config) {

	const jsonResult = excelToJson(config);

	it('should be an Object', function() {
		assert.equal(jsonResult.constructor, Object);
	});

	it('should have two result sets (Object with two keys)', function() {
		assert.equal(Object.keys(jsonResult).length, 3);
	});

	describe('sheet1', function() {

		it('should have a key named "sheet1"', function() {
			assert.notEqual(jsonResult.sheet1, undefined);
		});

		describe('result data', function() {

			it('should have 25 "rows"', function() {
				assert.equal(jsonResult.sheet1.length, 25);
			});

			it('should have the following keys "A", "B", "C", "D", "E", "F"', function() {
				assert.deepEqual(['A', 'B', 'C', 'D', 'E', 'F'], Object.keys(jsonResult.sheet1[0]));
			});

			it('should have the header values on the first position', function() {
				assert.deepEqual({
					A: 'id',
					B: 'first_name',
					C: 'last_name',
					D: 'email',
					E: 'gender',
					F: 'ip_address'
				}, jsonResult.sheet1[0]);
			});

			it('should have the last row data on the last position', function() {
				assert.deepStrictEqual({
					A: 24,
					B: 'Debra',
					C: 'Oliver',
					D: 'dolivern@yolasite.com',
					E: 'Female',
					F: '187.87.117.203'
				}, jsonResult.sheet1[jsonResult.sheet1.length - 1]);
			});
		});
	});

	describe('sheet2', function() {

		it('should have a key named "sheet2"', function() {
			assert.notEqual(jsonResult.sheet2, undefined);
		});

		describe('result data', function() {
			it('should have 27 "rows"', function() {
				assert.equal(jsonResult.sheet2.length, 27);
			});

			it('should have the following keys "A", "B", "C", "D", "E", "F"', function() {
				assert.deepEqual(['A', 'B', 'C', 'D', 'E', 'F'], Object.keys(jsonResult.sheet2[0]));
			});

			it('should have the header values on the first position', function() {
				assert.deepEqual({
					A: 'id',
					B: 'first_name',
					C: 'last_name',
					D: 'email',
					E: 'gender',
					F: 'ip_address'
				}, jsonResult.sheet2[0]);
			});

			it('should have the last row data on the last position', function() {
				assert.deepStrictEqual({
					A: 50,
					B: 'Susan',
					C: 'Miller',
					D: 'smiller1d@china.com.cn',
					E: 'Female',
					F: '244.232.244.90'
				}, jsonResult.sheet2[jsonResult.sheet2.length - 1]);
			});
		});
	});

	describe('sheet3', function() {

		it('should have a key named "sheet3"', function() {
			assert.notEqual(jsonResult.sheet3, undefined);
		});

		describe('result data', function() {
			it('should have 21 "rows"', function() {
				assert.equal(jsonResult.sheet3.length, 21);
			});

			it('should have the following keys "A", "B", "C", "D", "E", "F"', function() {
				assert.deepEqual(['A', 'B', 'C', 'D', 'E', 'F'], Object.keys(jsonResult.sheet3[0]));
			});

			it('should have the header values on the first position', function() {
				assert.deepEqual({
					A: 'id',
					B: 'first_name',
					C: 'last_name',
					D: 'email',
					E: 'gender',
					F: 'ip_address'
				}, jsonResult.sheet3[0]);
			});

			it('should have the last row data on the last position', function() {
				assert.deepStrictEqual({
					A: 43,
					B: 'Joseph',
					C: 'Price',
					D: 'jprice16@cmu.edu',
					E: 'Male',
					F: '33.92.219.103'
				}, jsonResult.sheet3[jsonResult.sheet3.length - 1]);
			});
		});
	});
}